import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import JL from "json-logic-js";
import moment from "moment";
export function applyJsonLogic(logic, data) {
  return JL.apply(logic, data);
}
function addJsonLogicOperation(name, op) {
  return JL.add_operation(name, op);
}
export var customJsonLogicOperations = {
  CALL: function CALL(fn, ctx) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    return fn.call.apply(fn, [ctx].concat(args));
  },
  JSX: function JSX(type, props) {
    return {
      type: type,
      props: props
    };
  },
  mergeObjects: function mergeObjects(obj1, obj2) {
    return _objectSpread(_objectSpread({}, obj1), obj2);
  },
  fromEntries: function fromEntries(entries) {
    return Object.fromEntries(entries);
  },
  strlen: function strlen(str) {
    return (str === null || str === void 0 ? void 0 : str.length) || 0;
  },
  regexTest: function regexTest(str, pattern, flags) {
    return (str === null || str === void 0 ? void 0 : str.match(new RegExp(pattern, flags))) != null;
  },
  now: function now() {
    return new Date();
  },
  date_add: function date_add(date, val, dim) {
    return moment(date).add(val, dim).toDate();
  },
  toLowerCase: function toLowerCase(str) {
    return str.toLowerCase();
  },
  toUpperCase: function toUpperCase(str) {
    return str.toUpperCase();
  }
};
export function addRequiredJsonLogicOperations() {
  for (var k in customJsonLogicOperations) {
    addJsonLogicOperation(k, customJsonLogicOperations[k]);
  }
}